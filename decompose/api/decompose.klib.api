// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.arkivanov.decompose:decompose>
open annotation class com.arkivanov.decompose/DelicateDecomposeApi : kotlin/Annotation { // com.arkivanov.decompose/DelicateDecomposeApi|null[0]
    constructor <init>() // com.arkivanov.decompose/DelicateDecomposeApi.<init>|<init>(){}[0]
}

open annotation class com.arkivanov.decompose/ExperimentalDecomposeApi : kotlin/Annotation { // com.arkivanov.decompose/ExperimentalDecomposeApi|null[0]
    constructor <init>() // com.arkivanov.decompose/ExperimentalDecomposeApi.<init>|<init>(){}[0]
}

open annotation class com.arkivanov.decompose/FaultyDecomposeApi : kotlin/Annotation { // com.arkivanov.decompose/FaultyDecomposeApi|null[0]
    constructor <init>() // com.arkivanov.decompose/FaultyDecomposeApi.<init>|<init>(){}[0]
}

open annotation class com.arkivanov.decompose/InternalDecomposeApi : kotlin/Annotation { // com.arkivanov.decompose/InternalDecomposeApi|null[0]
    constructor <init>() // com.arkivanov.decompose/InternalDecomposeApi.<init>|<init>(){}[0]
}

final enum class com.arkivanov.decompose.router.panels/ChildPanelsMode : kotlin/Enum<com.arkivanov.decompose.router.panels/ChildPanelsMode> { // com.arkivanov.decompose.router.panels/ChildPanelsMode|null[0]
    enum entry DUAL // com.arkivanov.decompose.router.panels/ChildPanelsMode.DUAL|null[0]
    enum entry SINGLE // com.arkivanov.decompose.router.panels/ChildPanelsMode.SINGLE|null[0]
    enum entry TRIPLE // com.arkivanov.decompose.router.panels/ChildPanelsMode.TRIPLE|null[0]

    final val entries // com.arkivanov.decompose.router.panels/ChildPanelsMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.arkivanov.decompose.router.panels/ChildPanelsMode> // com.arkivanov.decompose.router.panels/ChildPanelsMode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): com.arkivanov.decompose.router.panels/ChildPanelsMode // com.arkivanov.decompose.router.panels/ChildPanelsMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.arkivanov.decompose.router.panels/ChildPanelsMode> // com.arkivanov.decompose.router.panels/ChildPanelsMode.values|values#static(){}[0]
}

final enum class com.arkivanov.decompose.value/ObserveLifecycleMode : kotlin/Enum<com.arkivanov.decompose.value/ObserveLifecycleMode> { // com.arkivanov.decompose.value/ObserveLifecycleMode|null[0]
    enum entry CREATE_DESTROY // com.arkivanov.decompose.value/ObserveLifecycleMode.CREATE_DESTROY|null[0]
    enum entry RESUME_PAUSE // com.arkivanov.decompose.value/ObserveLifecycleMode.RESUME_PAUSE|null[0]
    enum entry START_STOP // com.arkivanov.decompose.value/ObserveLifecycleMode.START_STOP|null[0]

    final val entries // com.arkivanov.decompose.value/ObserveLifecycleMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.arkivanov.decompose.value/ObserveLifecycleMode> // com.arkivanov.decompose.value/ObserveLifecycleMode.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): com.arkivanov.decompose.value/ObserveLifecycleMode // com.arkivanov.decompose.value/ObserveLifecycleMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.arkivanov.decompose.value/ObserveLifecycleMode> // com.arkivanov.decompose.value/ObserveLifecycleMode.values|values#static(){}[0]
}

abstract fun interface <#A: out kotlin/Any> com.arkivanov.decompose/ComponentContextFactory { // com.arkivanov.decompose/ComponentContextFactory|null[0]
    abstract fun invoke(com.arkivanov.essenty.lifecycle/Lifecycle, com.arkivanov.essenty.statekeeper/StateKeeper, com.arkivanov.essenty.instancekeeper/InstanceKeeper, com.arkivanov.essenty.backhandler/BackHandler): #A // com.arkivanov.decompose/ComponentContextFactory.invoke|invoke(com.arkivanov.essenty.lifecycle.Lifecycle;com.arkivanov.essenty.statekeeper.StateKeeper;com.arkivanov.essenty.instancekeeper.InstanceKeeper;com.arkivanov.essenty.backhandler.BackHandler){}[0]
}

abstract fun interface com.arkivanov.decompose/Cancellation { // com.arkivanov.decompose/Cancellation|null[0]
    abstract fun cancel() // com.arkivanov.decompose/Cancellation.cancel|cancel(){}[0]
}

abstract interface <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> com.arkivanov.decompose.router.panels/PanelsNavigation : com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.panels/PanelsNavigation.Event<#A, #B, #C>>, com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C> { // com.arkivanov.decompose.router.panels/PanelsNavigation|null[0]
    final class <#A1: kotlin/Any, #B1: kotlin/Any, #C1: kotlin/Any> Event { // com.arkivanov.decompose.router.panels/PanelsNavigation.Event|null[0]
        constructor <init>(kotlin/Function1<com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>, com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>>, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>, com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/PanelsNavigation.Event.<init>|<init>(kotlin.Function1<com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>,com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>>;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>,com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>,kotlin.Unit>){}[0]

        final val onComplete // com.arkivanov.decompose.router.panels/PanelsNavigation.Event.onComplete|{}onComplete[0]
            final fun <get-onComplete>(): kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>, com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>, kotlin/Unit> // com.arkivanov.decompose.router.panels/PanelsNavigation.Event.onComplete.<get-onComplete>|<get-onComplete>(){}[0]
        final val transformer // com.arkivanov.decompose.router.panels/PanelsNavigation.Event.transformer|{}transformer[0]
            final fun <get-transformer>(): kotlin/Function1<com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>, com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>> // com.arkivanov.decompose.router.panels/PanelsNavigation.Event.transformer.<get-transformer>|<get-transformer>(){}[0]
    }
}

abstract interface <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> com.arkivanov.decompose.router.panels/PanelsNavigator { // com.arkivanov.decompose.router.panels/PanelsNavigator|null[0]
    abstract fun navigate(kotlin/Function1<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>>, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit>) // com.arkivanov.decompose.router.panels/PanelsNavigator.navigate|navigate(kotlin.Function1<com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>,com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>>;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>,com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>,kotlin.Unit>){}[0]
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.children/NavStateSaver { // com.arkivanov.decompose.router.children/NavStateSaver|null[0]
    abstract fun restoreState(com.arkivanov.essenty.statekeeper/SerializableContainer): #A? // com.arkivanov.decompose.router.children/NavStateSaver.restoreState|restoreState(com.arkivanov.essenty.statekeeper.SerializableContainer){}[0]
    abstract fun saveState(#A): com.arkivanov.essenty.statekeeper/SerializableContainer? // com.arkivanov.decompose.router.children/NavStateSaver.saveState|saveState(1:0){}[0]
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.items/ItemsNavigation : com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.items/ItemsNavigation.Event<#A>>, com.arkivanov.decompose.router.items/ItemsNavigator<#A> { // com.arkivanov.decompose.router.items/ItemsNavigation|null[0]
    final class <#A1: kotlin/Any> Event { // com.arkivanov.decompose.router.items/ItemsNavigation.Event|null[0]
        constructor <init>(kotlin/Function1<com.arkivanov.decompose.router.items/Items<#A1>, com.arkivanov.decompose.router.items/Items<#A1>>, kotlin/Function2<com.arkivanov.decompose.router.items/Items<#A1>, com.arkivanov.decompose.router.items/Items<#A1>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.items/ItemsNavigation.Event.<init>|<init>(kotlin.Function1<com.arkivanov.decompose.router.items.Items<1:0>,com.arkivanov.decompose.router.items.Items<1:0>>;kotlin.Function2<com.arkivanov.decompose.router.items.Items<1:0>,com.arkivanov.decompose.router.items.Items<1:0>,kotlin.Unit>){}[0]

        final val onComplete // com.arkivanov.decompose.router.items/ItemsNavigation.Event.onComplete|{}onComplete[0]
            final fun <get-onComplete>(): kotlin/Function2<com.arkivanov.decompose.router.items/Items<#A1>, com.arkivanov.decompose.router.items/Items<#A1>, kotlin/Unit> // com.arkivanov.decompose.router.items/ItemsNavigation.Event.onComplete.<get-onComplete>|<get-onComplete>(){}[0]
        final val transformer // com.arkivanov.decompose.router.items/ItemsNavigation.Event.transformer|{}transformer[0]
            final fun <get-transformer>(): kotlin/Function1<com.arkivanov.decompose.router.items/Items<#A1>, com.arkivanov.decompose.router.items/Items<#A1>> // com.arkivanov.decompose.router.items/ItemsNavigation.Event.transformer.<get-transformer>|<get-transformer>(){}[0]
    }
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.items/ItemsNavigator { // com.arkivanov.decompose.router.items/ItemsNavigator|null[0]
    abstract fun navigate(kotlin/Function1<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>>, kotlin/Function2<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.items/ItemsNavigator.navigate|navigate(kotlin.Function1<com.arkivanov.decompose.router.items.Items<1:0>,com.arkivanov.decompose.router.items.Items<1:0>>;kotlin.Function2<com.arkivanov.decompose.router.items.Items<1:0>,com.arkivanov.decompose.router.items.Items<1:0>,kotlin.Unit>){}[0]
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.pages/PagesNavigation : com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.pages/PagesNavigation.Event<#A>>, com.arkivanov.decompose.router.pages/PagesNavigator<#A> { // com.arkivanov.decompose.router.pages/PagesNavigation|null[0]
    final class <#A1: kotlin/Any> Event { // com.arkivanov.decompose.router.pages/PagesNavigation.Event|null[0]
        constructor <init>(kotlin/Function1<com.arkivanov.decompose.router.pages/Pages<#A1>, com.arkivanov.decompose.router.pages/Pages<#A1>>, kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A1>, com.arkivanov.decompose.router.pages/Pages<#A1>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/PagesNavigation.Event.<init>|<init>(kotlin.Function1<com.arkivanov.decompose.router.pages.Pages<1:0>,com.arkivanov.decompose.router.pages.Pages<1:0>>;kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<1:0>,com.arkivanov.decompose.router.pages.Pages<1:0>,kotlin.Unit>){}[0]

        final val onComplete // com.arkivanov.decompose.router.pages/PagesNavigation.Event.onComplete|{}onComplete[0]
            final fun <get-onComplete>(): kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A1>, com.arkivanov.decompose.router.pages/Pages<#A1>, kotlin/Unit> // com.arkivanov.decompose.router.pages/PagesNavigation.Event.onComplete.<get-onComplete>|<get-onComplete>(){}[0]
        final val transformer // com.arkivanov.decompose.router.pages/PagesNavigation.Event.transformer|{}transformer[0]
            final fun <get-transformer>(): kotlin/Function1<com.arkivanov.decompose.router.pages/Pages<#A1>, com.arkivanov.decompose.router.pages/Pages<#A1>> // com.arkivanov.decompose.router.pages/PagesNavigation.Event.transformer.<get-transformer>|<get-transformer>(){}[0]
    }
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.pages/PagesNavigator { // com.arkivanov.decompose.router.pages/PagesNavigator|null[0]
    abstract fun navigate(kotlin/Function1<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>>, kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.pages/PagesNavigator.navigate|navigate(kotlin.Function1<com.arkivanov.decompose.router.pages.Pages<1:0>,com.arkivanov.decompose.router.pages.Pages<1:0>>;kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<1:0>,com.arkivanov.decompose.router.pages.Pages<1:0>,kotlin.Unit>){}[0]
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.slot/SlotNavigation : com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.slot/SlotNavigation.Event<#A>>, com.arkivanov.decompose.router.slot/SlotNavigator<#A> { // com.arkivanov.decompose.router.slot/SlotNavigation|null[0]
    final class <#A1: kotlin/Any> Event { // com.arkivanov.decompose.router.slot/SlotNavigation.Event|null[0]
        constructor <init>(kotlin/Function1<#A1?, #A1?>, kotlin/Function2<#A1?, #A1?, kotlin/Unit> = ...) // com.arkivanov.decompose.router.slot/SlotNavigation.Event.<init>|<init>(kotlin.Function1<1:0?,1:0?>;kotlin.Function2<1:0?,1:0?,kotlin.Unit>){}[0]

        final val onComplete // com.arkivanov.decompose.router.slot/SlotNavigation.Event.onComplete|{}onComplete[0]
            final fun <get-onComplete>(): kotlin/Function2<#A1?, #A1?, kotlin/Unit> // com.arkivanov.decompose.router.slot/SlotNavigation.Event.onComplete.<get-onComplete>|<get-onComplete>(){}[0]
        final val transformer // com.arkivanov.decompose.router.slot/SlotNavigation.Event.transformer|{}transformer[0]
            final fun <get-transformer>(): kotlin/Function1<#A1?, #A1?> // com.arkivanov.decompose.router.slot/SlotNavigation.Event.transformer.<get-transformer>|<get-transformer>(){}[0]
    }
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.slot/SlotNavigator { // com.arkivanov.decompose.router.slot/SlotNavigator|null[0]
    abstract fun navigate(kotlin/Function1<#A?, #A?>, kotlin/Function2<#A?, #A?, kotlin/Unit>) // com.arkivanov.decompose.router.slot/SlotNavigator.navigate|navigate(kotlin.Function1<1:0?,1:0?>;kotlin.Function2<1:0?,1:0?,kotlin.Unit>){}[0]
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.stack/StackNavigation : com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.stack/StackNavigation.Event<#A>>, com.arkivanov.decompose.router.stack/StackNavigator<#A> { // com.arkivanov.decompose.router.stack/StackNavigation|null[0]
    final class <#A1: kotlin/Any> Event { // com.arkivanov.decompose.router.stack/StackNavigation.Event|null[0]
        constructor <init>(kotlin/Function1<kotlin.collections/List<#A1>, kotlin.collections/List<#A1>>, kotlin/Function2<kotlin.collections/List<#A1>, kotlin.collections/List<#A1>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/StackNavigation.Event.<init>|<init>(kotlin.Function1<kotlin.collections.List<1:0>,kotlin.collections.List<1:0>>;kotlin.Function2<kotlin.collections.List<1:0>,kotlin.collections.List<1:0>,kotlin.Unit>){}[0]

        final val onComplete // com.arkivanov.decompose.router.stack/StackNavigation.Event.onComplete|{}onComplete[0]
            final fun <get-onComplete>(): kotlin/Function2<kotlin.collections/List<#A1>, kotlin.collections/List<#A1>, kotlin/Unit> // com.arkivanov.decompose.router.stack/StackNavigation.Event.onComplete.<get-onComplete>|<get-onComplete>(){}[0]
        final val transformer // com.arkivanov.decompose.router.stack/StackNavigation.Event.transformer|{}transformer[0]
            final fun <get-transformer>(): kotlin/Function1<kotlin.collections/List<#A1>, kotlin.collections/List<#A1>> // com.arkivanov.decompose.router.stack/StackNavigation.Event.transformer.<get-transformer>|<get-transformer>(){}[0]
    }
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.stack/StackNavigator { // com.arkivanov.decompose.router.stack/StackNavigator|null[0]
    abstract fun navigate(kotlin/Function1<kotlin.collections/List<#A>, kotlin.collections/List<#A>>, kotlin/Function2<kotlin.collections/List<#A>, kotlin.collections/List<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.stack/StackNavigator.navigate|navigate(kotlin.Function1<kotlin.collections.List<1:0>,kotlin.collections.List<1:0>>;kotlin.Function2<kotlin.collections.List<1:0>,kotlin.collections.List<1:0>,kotlin.Unit>){}[0]
}

abstract interface <#A: kotlin/Any> com.arkivanov.decompose.router.webhistory/WebNavigation { // com.arkivanov.decompose.router.webhistory/WebNavigation|null[0]
    abstract val history // com.arkivanov.decompose.router.webhistory/WebNavigation.history|{}history[0]
        abstract fun <get-history>(): com.arkivanov.decompose.value/Value<kotlin.collections/List<com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem<#A>>> // com.arkivanov.decompose.router.webhistory/WebNavigation.history.<get-history>|<get-history>(){}[0]
    abstract val serializer // com.arkivanov.decompose.router.webhistory/WebNavigation.serializer|{}serializer[0]
        abstract fun <get-serializer>(): kotlinx.serialization/KSerializer<#A> // com.arkivanov.decompose.router.webhistory/WebNavigation.serializer.<get-serializer>|<get-serializer>(){}[0]

    abstract fun navigate(kotlin.collections/List<#A>) // com.arkivanov.decompose.router.webhistory/WebNavigation.navigate|navigate(kotlin.collections.List<1:0>){}[0]
    abstract fun onBeforeNavigate(): kotlin/Boolean // com.arkivanov.decompose.router.webhistory/WebNavigation.onBeforeNavigate|onBeforeNavigate(){}[0]

    final class <#A1: out kotlin/Any?> HistoryItem { // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem|null[0]
        constructor <init>(#A1, kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/String>, com.arkivanov.decompose.router.webhistory/WebNavigationOwner?) // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.<init>|<init>(1:0;kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.String>;com.arkivanov.decompose.router.webhistory.WebNavigationOwner?){}[0]

        final val child // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.child|{}child[0]
            final fun <get-child>(): com.arkivanov.decompose.router.webhistory/WebNavigationOwner? // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.child.<get-child>|<get-child>(){}[0]
        final val key // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.key|{}key[0]
            final fun <get-key>(): #A1 // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.key.<get-key>|<get-key>(){}[0]
        final val parameters // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.parameters|{}parameters[0]
            final fun <get-parameters>(): kotlin.collections/Map<kotlin/String, kotlin/String> // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.parameters.<get-parameters>|<get-parameters>(){}[0]
        final val path // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.path|{}path[0]
            final fun <get-path>(): kotlin/String // com.arkivanov.decompose.router.webhistory/WebNavigation.HistoryItem.path.<get-path>|<get-path>(){}[0]
    }
}

abstract interface <#A: out kotlin/Any> com.arkivanov.decompose.router.children/ChildNavState { // com.arkivanov.decompose.router.children/ChildNavState|null[0]
    abstract val configuration // com.arkivanov.decompose.router.children/ChildNavState.configuration|{}configuration[0]
        abstract fun <get-configuration>(): #A // com.arkivanov.decompose.router.children/ChildNavState.configuration.<get-configuration>|<get-configuration>(){}[0]
    abstract val status // com.arkivanov.decompose.router.children/ChildNavState.status|{}status[0]
        abstract fun <get-status>(): com.arkivanov.decompose.router.children/ChildNavState.Status // com.arkivanov.decompose.router.children/ChildNavState.status.<get-status>|<get-status>(){}[0]

    final enum class Status : kotlin/Enum<com.arkivanov.decompose.router.children/ChildNavState.Status> { // com.arkivanov.decompose.router.children/ChildNavState.Status|null[0]
        enum entry CREATED // com.arkivanov.decompose.router.children/ChildNavState.Status.CREATED|null[0]
        enum entry DESTROYED // com.arkivanov.decompose.router.children/ChildNavState.Status.DESTROYED|null[0]
        enum entry RESUMED // com.arkivanov.decompose.router.children/ChildNavState.Status.RESUMED|null[0]
        enum entry STARTED // com.arkivanov.decompose.router.children/ChildNavState.Status.STARTED|null[0]

        final val entries // com.arkivanov.decompose.router.children/ChildNavState.Status.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.arkivanov.decompose.router.children/ChildNavState.Status> // com.arkivanov.decompose.router.children/ChildNavState.Status.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.arkivanov.decompose.router.children/ChildNavState.Status // com.arkivanov.decompose.router.children/ChildNavState.Status.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.arkivanov.decompose.router.children/ChildNavState.Status> // com.arkivanov.decompose.router.children/ChildNavState.Status.values|values#static(){}[0]
    }
}

abstract interface <#A: out kotlin/Any> com.arkivanov.decompose.router.children/NavState { // com.arkivanov.decompose.router.children/NavState|null[0]
    abstract val children // com.arkivanov.decompose.router.children/NavState.children|{}children[0]
        abstract fun <get-children>(): kotlin.collections/List<com.arkivanov.decompose.router.children/ChildNavState<#A>> // com.arkivanov.decompose.router.children/NavState.children.<get-children>|<get-children>(){}[0]
}

abstract interface <#A: out kotlin/Any> com.arkivanov.decompose.router.children/NavigationSource { // com.arkivanov.decompose.router.children/NavigationSource|null[0]
    abstract fun subscribe(kotlin/Function1<#A, kotlin/Unit>): com.arkivanov.decompose/Cancellation // com.arkivanov.decompose.router.children/NavigationSource.subscribe|subscribe(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

abstract interface <#A: out kotlin/Any> com.arkivanov.decompose/ComponentContextFactoryOwner { // com.arkivanov.decompose/ComponentContextFactoryOwner|null[0]
    abstract val componentContextFactory // com.arkivanov.decompose/ComponentContextFactoryOwner.componentContextFactory|{}componentContextFactory[0]
        abstract fun <get-componentContextFactory>(): com.arkivanov.decompose/ComponentContextFactory<#A> // com.arkivanov.decompose/ComponentContextFactoryOwner.componentContextFactory.<get-componentContextFactory>|<get-componentContextFactory>(){}[0]
}

abstract interface <#A: out kotlin/Any> com.arkivanov.decompose/GenericComponentContext : com.arkivanov.decompose/ComponentContextFactoryOwner<#A>, com.arkivanov.essenty.backhandler/BackHandlerOwner, com.arkivanov.essenty.instancekeeper/InstanceKeeperOwner, com.arkivanov.essenty.lifecycle/LifecycleOwner, com.arkivanov.essenty.statekeeper/StateKeeperOwner // com.arkivanov.decompose/GenericComponentContext|null[0]

abstract interface com.arkivanov.decompose.router.stack.webhistory/WebHistoryController { // com.arkivanov.decompose.router.stack.webhistory/WebHistoryController|null[0]
    abstract val historyPaths // com.arkivanov.decompose.router.stack.webhistory/WebHistoryController.historyPaths|{}historyPaths[0]
        abstract fun <get-historyPaths>(): kotlin.collections/List<kotlin/String> // com.arkivanov.decompose.router.stack.webhistory/WebHistoryController.historyPaths.<get-historyPaths>|<get-historyPaths>(){}[0]

    abstract fun <#A1: kotlin/Any> attach(com.arkivanov.decompose.router.stack/StackNavigator<#A1>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#A1, *>>, kotlinx.serialization/KSerializer<#A1>, kotlin/Function1<#A1, kotlin/String>, kotlin/Function1<kotlin/String, #A1>, kotlin/Function2<kotlin.collections/List<#A1>, kotlin.collections/List<#A1>, kotlin/Boolean> = ...) // com.arkivanov.decompose.router.stack.webhistory/WebHistoryController.attach|attach(com.arkivanov.decompose.router.stack.StackNavigator<0:0>;com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,*>>;kotlinx.serialization.KSerializer<0:0>;kotlin.Function1<0:0,kotlin.String>;kotlin.Function1<kotlin.String,0:0>;kotlin.Function2<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>,kotlin.Boolean>){0§<kotlin.Any>}[0]
}

abstract interface com.arkivanov.decompose.router.webhistory/WebNavigationOwner { // com.arkivanov.decompose.router.webhistory/WebNavigationOwner|null[0]
    abstract val webNavigation // com.arkivanov.decompose.router.webhistory/WebNavigationOwner.webNavigation|{}webNavigation[0]
        abstract fun <get-webNavigation>(): com.arkivanov.decompose.router.webhistory/WebNavigation<*> // com.arkivanov.decompose.router.webhistory/WebNavigationOwner.webNavigation.<get-webNavigation>|<get-webNavigation>(){}[0]

    abstract interface NoOp : com.arkivanov.decompose.router.webhistory/WebNavigationOwner { // com.arkivanov.decompose.router.webhistory/WebNavigationOwner.NoOp|null[0]
        open val webNavigation // com.arkivanov.decompose.router.webhistory/WebNavigationOwner.NoOp.webNavigation|{}webNavigation[0]
            open fun <get-webNavigation>(): com.arkivanov.decompose.router.webhistory/WebNavigation<*> // com.arkivanov.decompose.router.webhistory/WebNavigationOwner.NoOp.webNavigation.<get-webNavigation>|<get-webNavigation>(){}[0]
    }
}

abstract interface com.arkivanov.decompose/ComponentContext : com.arkivanov.decompose/GenericComponentContext<com.arkivanov.decompose/ComponentContext> // com.arkivanov.decompose/ComponentContext|null[0]

abstract class <#A: kotlin/Any, #B: out kotlin/Any> com.arkivanov.decompose.router.items/LazyChildItems : com.arkivanov.decompose.router.items/ItemsNavigator<#A>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.items/ChildItems<#A, #B>> { // com.arkivanov.decompose.router.items/LazyChildItems|null[0]
    constructor <init>() // com.arkivanov.decompose.router.items/LazyChildItems.<init>|<init>(){}[0]

    abstract fun get(#A): #B // com.arkivanov.decompose.router.items/LazyChildItems.get|get(1:0){}[0]
    abstract fun navigate(kotlin/Function1<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>>, kotlin/Function2<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.items/LazyChildItems.navigate|navigate(kotlin.Function1<com.arkivanov.decompose.router.items.Items<1:0>,com.arkivanov.decompose.router.items.Items<1:0>>;kotlin.Function2<com.arkivanov.decompose.router.items.Items<1:0>,com.arkivanov.decompose.router.items.Items<1:0>,kotlin.Unit>){}[0]
}

abstract class <#A: kotlin/Any> com.arkivanov.decompose.value/MutableValue : com.arkivanov.decompose.value/Value<#A> { // com.arkivanov.decompose.value/MutableValue|null[0]
    constructor <init>() // com.arkivanov.decompose.value/MutableValue.<init>|<init>(){}[0]

    abstract var value // com.arkivanov.decompose.value/MutableValue.value|{}value[0]
        abstract fun <get-value>(): #A // com.arkivanov.decompose.value/MutableValue.value.<get-value>|<get-value>(){}[0]
        abstract fun <set-value>(#A) // com.arkivanov.decompose.value/MutableValue.value.<set-value>|<set-value>(1:0){}[0]

    abstract fun compareAndSet(#A, #A): kotlin/Boolean // com.arkivanov.decompose.value/MutableValue.compareAndSet|compareAndSet(1:0;1:0){}[0]
}

abstract class <#A: out kotlin/Any> com.arkivanov.decompose.value/Value { // com.arkivanov.decompose.value/Value|null[0]
    constructor <init>() // com.arkivanov.decompose.value/Value.<init>|<init>(){}[0]

    abstract val value // com.arkivanov.decompose.value/Value.value|{}value[0]
        abstract fun <get-value>(): #A // com.arkivanov.decompose.value/Value.value.<get-value>|<get-value>(){}[0]

    abstract fun subscribe(kotlin/Function1<#A, kotlin/Unit>): com.arkivanov.decompose/Cancellation // com.arkivanov.decompose.value/Value.subscribe|subscribe(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any, #B: out kotlin/Any> com.arkivanov.decompose.router.items/ChildItems { // com.arkivanov.decompose.router.items/ChildItems|null[0]
    constructor <init>(kotlin.collections/List<#A> = ..., kotlin.collections/Map<#A, kotlin/Pair<#B, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>> = ...) // com.arkivanov.decompose.router.items/ChildItems.<init>|<init>(kotlin.collections.List<1:0>;kotlin.collections.Map<1:0,kotlin.Pair<1:1,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>>){}[0]

    final val activeItems // com.arkivanov.decompose.router.items/ChildItems.activeItems|{}activeItems[0]
        final fun <get-activeItems>(): kotlin.collections/Map<#A, kotlin/Pair<#B, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>> // com.arkivanov.decompose.router.items/ChildItems.activeItems.<get-activeItems>|<get-activeItems>(){}[0]
    final val items // com.arkivanov.decompose.router.items/ChildItems.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<#A> // com.arkivanov.decompose.router.items/ChildItems.items.<get-items>|<get-items>(){}[0]

    final fun component1(): kotlin.collections/List<#A> // com.arkivanov.decompose.router.items/ChildItems.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Map<#A, kotlin/Pair<#B, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>> // com.arkivanov.decompose.router.items/ChildItems.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<#A> = ..., kotlin.collections/Map<#A, kotlin/Pair<#B, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>> = ...): com.arkivanov.decompose.router.items/ChildItems<#A, #B> // com.arkivanov.decompose.router.items/ChildItems.copy|copy(kotlin.collections.List<1:0>;kotlin.collections.Map<1:0,kotlin.Pair<1:1,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.items/ChildItems.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.items/ChildItems.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.items/ChildItems.toString|toString(){}[0]
}

final class <#A: kotlin/Any> com.arkivanov.decompose.router.children/SimpleNavigation : com.arkivanov.decompose.router.children/NavigationSource<#A> { // com.arkivanov.decompose.router.children/SimpleNavigation|null[0]
    constructor <init>() // com.arkivanov.decompose.router.children/SimpleNavigation.<init>|<init>(){}[0]

    final fun navigate(#A) // com.arkivanov.decompose.router.children/SimpleNavigation.navigate|navigate(1:0){}[0]
    final fun subscribe(kotlin/Function1<#A, kotlin/Unit>): com.arkivanov.decompose/Cancellation // com.arkivanov.decompose.router.children/SimpleNavigation.subscribe|subscribe(kotlin.Function1<1:0,kotlin.Unit>){}[0]
}

final class <#A: kotlin/Any> com.arkivanov.decompose.router.items/Items { // com.arkivanov.decompose.router.items/Items|null[0]
    constructor <init>(kotlin.collections/List<#A> = ..., kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> = ...) // com.arkivanov.decompose.router.items/Items.<init>|<init>(kotlin.collections.List<1:0>;kotlin.collections.Map<1:0,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>){}[0]

    final val activeItems // com.arkivanov.decompose.router.items/Items.activeItems|{}activeItems[0]
        final fun <get-activeItems>(): kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> // com.arkivanov.decompose.router.items/Items.activeItems.<get-activeItems>|<get-activeItems>(){}[0]
    final val items // com.arkivanov.decompose.router.items/Items.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<#A> // com.arkivanov.decompose.router.items/Items.items.<get-items>|<get-items>(){}[0]

    final fun component1(): kotlin.collections/List<#A> // com.arkivanov.decompose.router.items/Items.component1|component1(){}[0]
    final fun component2(): kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> // com.arkivanov.decompose.router.items/Items.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<#A> = ..., kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> = ...): com.arkivanov.decompose.router.items/Items<#A> // com.arkivanov.decompose.router.items/Items.copy|copy(kotlin.collections.List<1:0>;kotlin.collections.Map<1:0,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.items/Items.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.items/Items.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.items/Items.toString|toString(){}[0]

    final enum class ActiveLifecycleState : kotlin/Enum<com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> { // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState|null[0]
        enum entry CREATED // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.CREATED|null[0]
        enum entry RESUMED // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.RESUMED|null[0]
        enum entry STARTED // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.STARTED|null[0]

        final val entries // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.arkivanov.decompose.router.items/Items.ActiveLifecycleState // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.arkivanov.decompose.router.items/Items.ActiveLifecycleState> // com.arkivanov.decompose.router.items/Items.ActiveLifecycleState.values|values#static(){}[0]
    }

    final class <#A1: kotlin/Any?> $serializer : kotlinx.serialization.internal/GeneratedSerializer<com.arkivanov.decompose.router.items/Items<#A1>> { // com.arkivanov.decompose.router.items/Items.$serializer|null[0]
        constructor <init>(kotlinx.serialization/KSerializer<#A1>) // com.arkivanov.decompose.router.items/Items.$serializer.<init>|<init>(kotlinx.serialization.KSerializer<1:0>){}[0]

        final val descriptor // com.arkivanov.decompose.router.items/Items.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // com.arkivanov.decompose.router.items/Items.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        final val typeSerial0 // com.arkivanov.decompose.router.items/Items.$serializer.typeSerial0|{}typeSerial0[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // com.arkivanov.decompose.router.items/Items.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): com.arkivanov.decompose.router.items/Items<#A1> // com.arkivanov.decompose.router.items/Items.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, com.arkivanov.decompose.router.items/Items<#A1>) // com.arkivanov.decompose.router.items/Items.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;com.arkivanov.decompose.router.items.Items<1:0>){}[0]
        final fun typeParametersSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // com.arkivanov.decompose.router.items/Items.$serializer.typeParametersSerializers|typeParametersSerializers(){}[0]
    }

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // com.arkivanov.decompose.router.items/Items.Companion|null[0]
        final val $cachedDescriptor // com.arkivanov.decompose.router.items/Items.Companion.$cachedDescriptor|{}$cachedDescriptor[0]
            final fun <get-$cachedDescriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // com.arkivanov.decompose.router.items/Items.Companion.$cachedDescriptor.<get-$cachedDescriptor>|<get-$cachedDescriptor>(){}[0]

        final fun <#A2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>): kotlinx.serialization/KSerializer<com.arkivanov.decompose.router.items/Items<#A2>> // com.arkivanov.decompose.router.items/Items.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // com.arkivanov.decompose.router.items/Items.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final class <#A: out kotlin/Any, #B: out kotlin/Any, #C: out kotlin/Any, #D: out kotlin/Any, #E: out kotlin/Any, #F: out kotlin/Any> com.arkivanov.decompose.router.panels/ChildPanels { // com.arkivanov.decompose.router.panels/ChildPanels|null[0]
    constructor <init>(com.arkivanov.decompose/Child.Created<#A, #B>, com.arkivanov.decompose/Child.Created<#C, #D>? = ..., com.arkivanov.decompose/Child.Created<#E, #F>? = ..., com.arkivanov.decompose.router.panels/ChildPanelsMode = ...) // com.arkivanov.decompose.router.panels/ChildPanels.<init>|<init>(com.arkivanov.decompose.Child.Created<1:0,1:1>;com.arkivanov.decompose.Child.Created<1:2,1:3>?;com.arkivanov.decompose.Child.Created<1:4,1:5>?;com.arkivanov.decompose.router.panels.ChildPanelsMode){}[0]

    final val details // com.arkivanov.decompose.router.panels/ChildPanels.details|{}details[0]
        final fun <get-details>(): com.arkivanov.decompose/Child.Created<#C, #D>? // com.arkivanov.decompose.router.panels/ChildPanels.details.<get-details>|<get-details>(){}[0]
    final val extra // com.arkivanov.decompose.router.panels/ChildPanels.extra|{}extra[0]
        final fun <get-extra>(): com.arkivanov.decompose/Child.Created<#E, #F>? // com.arkivanov.decompose.router.panels/ChildPanels.extra.<get-extra>|<get-extra>(){}[0]
    final val main // com.arkivanov.decompose.router.panels/ChildPanels.main|{}main[0]
        final fun <get-main>(): com.arkivanov.decompose/Child.Created<#A, #B> // com.arkivanov.decompose.router.panels/ChildPanels.main.<get-main>|<get-main>(){}[0]
    final val mode // com.arkivanov.decompose.router.panels/ChildPanels.mode|{}mode[0]
        final fun <get-mode>(): com.arkivanov.decompose.router.panels/ChildPanelsMode // com.arkivanov.decompose.router.panels/ChildPanels.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): com.arkivanov.decompose/Child.Created<#A, #B> // com.arkivanov.decompose.router.panels/ChildPanels.component1|component1(){}[0]
    final fun component2(): com.arkivanov.decompose/Child.Created<#C, #D>? // com.arkivanov.decompose.router.panels/ChildPanels.component2|component2(){}[0]
    final fun component3(): com.arkivanov.decompose/Child.Created<#E, #F>? // com.arkivanov.decompose.router.panels/ChildPanels.component3|component3(){}[0]
    final fun component4(): com.arkivanov.decompose.router.panels/ChildPanelsMode // com.arkivanov.decompose.router.panels/ChildPanels.component4|component4(){}[0]
    final fun copy(com.arkivanov.decompose/Child.Created<#A, #B> = ..., com.arkivanov.decompose/Child.Created<#C, #D>? = ..., com.arkivanov.decompose/Child.Created<#E, #F>? = ..., com.arkivanov.decompose.router.panels/ChildPanelsMode = ...): com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, #E, #F> // com.arkivanov.decompose.router.panels/ChildPanels.copy|copy(com.arkivanov.decompose.Child.Created<1:0,1:1>;com.arkivanov.decompose.Child.Created<1:2,1:3>?;com.arkivanov.decompose.Child.Created<1:4,1:5>?;com.arkivanov.decompose.router.panels.ChildPanelsMode){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.panels/ChildPanels.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.panels/ChildPanels.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.panels/ChildPanels.toString|toString(){}[0]
}

final class <#A: out kotlin/Any, #B: out kotlin/Any, #C: out kotlin/Any> com.arkivanov.decompose.router.panels/Panels { // com.arkivanov.decompose.router.panels/Panels|null[0]
    constructor <init>(#A, #B? = ..., #C? = ..., com.arkivanov.decompose.router.panels/ChildPanelsMode = ...) // com.arkivanov.decompose.router.panels/Panels.<init>|<init>(1:0;1:1?;1:2?;com.arkivanov.decompose.router.panels.ChildPanelsMode){}[0]

    final val details // com.arkivanov.decompose.router.panels/Panels.details|{}details[0]
        final fun <get-details>(): #B? // com.arkivanov.decompose.router.panels/Panels.details.<get-details>|<get-details>(){}[0]
    final val extra // com.arkivanov.decompose.router.panels/Panels.extra|{}extra[0]
        final fun <get-extra>(): #C? // com.arkivanov.decompose.router.panels/Panels.extra.<get-extra>|<get-extra>(){}[0]
    final val main // com.arkivanov.decompose.router.panels/Panels.main|{}main[0]
        final fun <get-main>(): #A // com.arkivanov.decompose.router.panels/Panels.main.<get-main>|<get-main>(){}[0]
    final val mode // com.arkivanov.decompose.router.panels/Panels.mode|{}mode[0]
        final fun <get-mode>(): com.arkivanov.decompose.router.panels/ChildPanelsMode // com.arkivanov.decompose.router.panels/Panels.mode.<get-mode>|<get-mode>(){}[0]

    final fun component1(): #A // com.arkivanov.decompose.router.panels/Panels.component1|component1(){}[0]
    final fun component2(): #B? // com.arkivanov.decompose.router.panels/Panels.component2|component2(){}[0]
    final fun component3(): #C? // com.arkivanov.decompose.router.panels/Panels.component3|component3(){}[0]
    final fun component4(): com.arkivanov.decompose.router.panels/ChildPanelsMode // com.arkivanov.decompose.router.panels/Panels.component4|component4(){}[0]
    final fun copy(#A = ..., #B? = ..., #C? = ..., com.arkivanov.decompose.router.panels/ChildPanelsMode = ...): com.arkivanov.decompose.router.panels/Panels<#A, #B, #C> // com.arkivanov.decompose.router.panels/Panels.copy|copy(1:0;1:1?;1:2?;com.arkivanov.decompose.router.panels.ChildPanelsMode){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.panels/Panels.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.panels/Panels.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.panels/Panels.toString|toString(){}[0]

    final class <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> $serializer : kotlinx.serialization.internal/GeneratedSerializer<com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>> { // com.arkivanov.decompose.router.panels/Panels.$serializer|null[0]
        constructor <init>(kotlinx.serialization/KSerializer<#A1>, kotlinx.serialization/KSerializer<#B1>, kotlinx.serialization/KSerializer<#C1>) // com.arkivanov.decompose.router.panels/Panels.$serializer.<init>|<init>(kotlinx.serialization.KSerializer<1:0>;kotlinx.serialization.KSerializer<1:1>;kotlinx.serialization.KSerializer<1:2>){}[0]

        final val descriptor // com.arkivanov.decompose.router.panels/Panels.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // com.arkivanov.decompose.router.panels/Panels.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        final val typeSerial0 // com.arkivanov.decompose.router.panels/Panels.$serializer.typeSerial0|{}typeSerial0[0]
        final val typeSerial1 // com.arkivanov.decompose.router.panels/Panels.$serializer.typeSerial1|{}typeSerial1[0]
        final val typeSerial2 // com.arkivanov.decompose.router.panels/Panels.$serializer.typeSerial2|{}typeSerial2[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // com.arkivanov.decompose.router.panels/Panels.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1> // com.arkivanov.decompose.router.panels/Panels.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, com.arkivanov.decompose.router.panels/Panels<#A1, #B1, #C1>) // com.arkivanov.decompose.router.panels/Panels.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;com.arkivanov.decompose.router.panels.Panels<1:0,1:1,1:2>){}[0]
        final fun typeParametersSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // com.arkivanov.decompose.router.panels/Panels.$serializer.typeParametersSerializers|typeParametersSerializers(){}[0]
    }

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // com.arkivanov.decompose.router.panels/Panels.Companion|null[0]
        final val $cachedDescriptor // com.arkivanov.decompose.router.panels/Panels.Companion.$cachedDescriptor|{}$cachedDescriptor[0]
            final fun <get-$cachedDescriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // com.arkivanov.decompose.router.panels/Panels.Companion.$cachedDescriptor.<get-$cachedDescriptor>|<get-$cachedDescriptor>(){}[0]
        final val $childSerializers // com.arkivanov.decompose.router.panels/Panels.Companion.$childSerializers|{}$childSerializers[0]

        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>, kotlinx.serialization/KSerializer<#B2>, kotlinx.serialization/KSerializer<#C2>): kotlinx.serialization/KSerializer<com.arkivanov.decompose.router.panels/Panels<#A2, #B2, #C2>> // com.arkivanov.decompose.router.panels/Panels.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>;kotlinx.serialization.KSerializer<0:1>;kotlinx.serialization.KSerializer<0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // com.arkivanov.decompose.router.panels/Panels.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final class <#A: out kotlin/Any, #B: out kotlin/Any> com.arkivanov.decompose.router.pages/ChildPages { // com.arkivanov.decompose.router.pages/ChildPages|null[0]
    constructor <init>() // com.arkivanov.decompose.router.pages/ChildPages.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/List<com.arkivanov.decompose/Child<#A, #B>>, kotlin/Int) // com.arkivanov.decompose.router.pages/ChildPages.<init>|<init>(kotlin.collections.List<com.arkivanov.decompose.Child<1:0,1:1>>;kotlin.Int){}[0]

    final val items // com.arkivanov.decompose.router.pages/ChildPages.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<com.arkivanov.decompose/Child<#A, #B>> // com.arkivanov.decompose.router.pages/ChildPages.items.<get-items>|<get-items>(){}[0]
    final val selectedIndex // com.arkivanov.decompose.router.pages/ChildPages.selectedIndex|{}selectedIndex[0]
        final fun <get-selectedIndex>(): kotlin/Int // com.arkivanov.decompose.router.pages/ChildPages.selectedIndex.<get-selectedIndex>|<get-selectedIndex>(){}[0]

    final fun component1(): kotlin.collections/List<com.arkivanov.decompose/Child<#A, #B>> // com.arkivanov.decompose.router.pages/ChildPages.component1|component1(){}[0]
    final fun component2(): kotlin/Int // com.arkivanov.decompose.router.pages/ChildPages.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<com.arkivanov.decompose/Child<#A, #B>> = ..., kotlin/Int = ...): com.arkivanov.decompose.router.pages/ChildPages<#A, #B> // com.arkivanov.decompose.router.pages/ChildPages.copy|copy(kotlin.collections.List<com.arkivanov.decompose.Child<1:0,1:1>>;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.pages/ChildPages.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.pages/ChildPages.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.pages/ChildPages.toString|toString(){}[0]
}

final class <#A: out kotlin/Any, #B: out kotlin/Any> com.arkivanov.decompose.router.slot/ChildSlot { // com.arkivanov.decompose.router.slot/ChildSlot|null[0]
    constructor <init>(com.arkivanov.decompose/Child.Created<#A, #B>? = ...) // com.arkivanov.decompose.router.slot/ChildSlot.<init>|<init>(com.arkivanov.decompose.Child.Created<1:0,1:1>?){}[0]

    final val child // com.arkivanov.decompose.router.slot/ChildSlot.child|{}child[0]
        final fun <get-child>(): com.arkivanov.decompose/Child.Created<#A, #B>? // com.arkivanov.decompose.router.slot/ChildSlot.child.<get-child>|<get-child>(){}[0]

    final fun component1(): com.arkivanov.decompose/Child.Created<#A, #B>? // com.arkivanov.decompose.router.slot/ChildSlot.component1|component1(){}[0]
    final fun copy(com.arkivanov.decompose/Child.Created<#A, #B>? = ...): com.arkivanov.decompose.router.slot/ChildSlot<#A, #B> // com.arkivanov.decompose.router.slot/ChildSlot.copy|copy(com.arkivanov.decompose.Child.Created<1:0,1:1>?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.slot/ChildSlot.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.slot/ChildSlot.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.slot/ChildSlot.toString|toString(){}[0]
}

final class <#A: out kotlin/Any, #B: out kotlin/Any> com.arkivanov.decompose.router.stack/ChildStack { // com.arkivanov.decompose.router.stack/ChildStack|null[0]
    constructor <init>(#A, #B) // com.arkivanov.decompose.router.stack/ChildStack.<init>|<init>(1:0;1:1){}[0]
    constructor <init>(com.arkivanov.decompose/Child.Created<#A, #B>, kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A, #B>> = ...) // com.arkivanov.decompose.router.stack/ChildStack.<init>|<init>(com.arkivanov.decompose.Child.Created<1:0,1:1>;kotlin.collections.List<com.arkivanov.decompose.Child.Created<1:0,1:1>>){}[0]

    final val active // com.arkivanov.decompose.router.stack/ChildStack.active|{}active[0]
        final fun <get-active>(): com.arkivanov.decompose/Child.Created<#A, #B> // com.arkivanov.decompose.router.stack/ChildStack.active.<get-active>|<get-active>(){}[0]
    final val backStack // com.arkivanov.decompose.router.stack/ChildStack.backStack|{}backStack[0]
        final fun <get-backStack>(): kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A, #B>> // com.arkivanov.decompose.router.stack/ChildStack.backStack.<get-backStack>|<get-backStack>(){}[0]
    final val items // com.arkivanov.decompose.router.stack/ChildStack.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A, #B>> // com.arkivanov.decompose.router.stack/ChildStack.items.<get-items>|<get-items>(){}[0]

    final fun component1(): com.arkivanov.decompose/Child.Created<#A, #B> // com.arkivanov.decompose.router.stack/ChildStack.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A, #B>> // com.arkivanov.decompose.router.stack/ChildStack.component2|component2(){}[0]
    final fun copy(com.arkivanov.decompose/Child.Created<#A, #B> = ..., kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A, #B>> = ...): com.arkivanov.decompose.router.stack/ChildStack<#A, #B> // com.arkivanov.decompose.router.stack/ChildStack.copy|copy(com.arkivanov.decompose.Child.Created<1:0,1:1>;kotlin.collections.List<com.arkivanov.decompose.Child.Created<1:0,1:1>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.stack/ChildStack.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.stack/ChildStack.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.stack/ChildStack.toString|toString(){}[0]
}

final class <#A: out kotlin/Any> com.arkivanov.decompose.router.children/SimpleChildNavState : com.arkivanov.decompose.router.children/ChildNavState<#A> { // com.arkivanov.decompose.router.children/SimpleChildNavState|null[0]
    constructor <init>(#A, com.arkivanov.decompose.router.children/ChildNavState.Status) // com.arkivanov.decompose.router.children/SimpleChildNavState.<init>|<init>(1:0;com.arkivanov.decompose.router.children.ChildNavState.Status){}[0]

    final val configuration // com.arkivanov.decompose.router.children/SimpleChildNavState.configuration|{}configuration[0]
        final fun <get-configuration>(): #A // com.arkivanov.decompose.router.children/SimpleChildNavState.configuration.<get-configuration>|<get-configuration>(){}[0]
    final val status // com.arkivanov.decompose.router.children/SimpleChildNavState.status|{}status[0]
        final fun <get-status>(): com.arkivanov.decompose.router.children/ChildNavState.Status // com.arkivanov.decompose.router.children/SimpleChildNavState.status.<get-status>|<get-status>(){}[0]

    final fun component1(): #A // com.arkivanov.decompose.router.children/SimpleChildNavState.component1|component1(){}[0]
    final fun component2(): com.arkivanov.decompose.router.children/ChildNavState.Status // com.arkivanov.decompose.router.children/SimpleChildNavState.component2|component2(){}[0]
    final fun copy(#A = ..., com.arkivanov.decompose.router.children/ChildNavState.Status = ...): com.arkivanov.decompose.router.children/SimpleChildNavState<#A> // com.arkivanov.decompose.router.children/SimpleChildNavState.copy|copy(1:0;com.arkivanov.decompose.router.children.ChildNavState.Status){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.children/SimpleChildNavState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.children/SimpleChildNavState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.children/SimpleChildNavState.toString|toString(){}[0]
}

final class <#A: out kotlin/Any> com.arkivanov.decompose.router.pages/Pages { // com.arkivanov.decompose.router.pages/Pages|null[0]
    constructor <init>() // com.arkivanov.decompose.router.pages/Pages.<init>|<init>(){}[0]
    constructor <init>(kotlin.collections/List<#A>, kotlin/Int) // com.arkivanov.decompose.router.pages/Pages.<init>|<init>(kotlin.collections.List<1:0>;kotlin.Int){}[0]

    final val items // com.arkivanov.decompose.router.pages/Pages.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<#A> // com.arkivanov.decompose.router.pages/Pages.items.<get-items>|<get-items>(){}[0]
    final val selectedIndex // com.arkivanov.decompose.router.pages/Pages.selectedIndex|{}selectedIndex[0]
        final fun <get-selectedIndex>(): kotlin/Int // com.arkivanov.decompose.router.pages/Pages.selectedIndex.<get-selectedIndex>|<get-selectedIndex>(){}[0]

    final fun component1(): kotlin.collections/List<#A> // com.arkivanov.decompose.router.pages/Pages.component1|component1(){}[0]
    final fun component2(): kotlin/Int // com.arkivanov.decompose.router.pages/Pages.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<#A> = ..., kotlin/Int = ...): com.arkivanov.decompose.router.pages/Pages<#A> // com.arkivanov.decompose.router.pages/Pages.copy|copy(kotlin.collections.List<1:0>;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose.router.pages/Pages.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.arkivanov.decompose.router.pages/Pages.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.arkivanov.decompose.router.pages/Pages.toString|toString(){}[0]

    final class <#A1: kotlin/Any?> $serializer : kotlinx.serialization.internal/GeneratedSerializer<com.arkivanov.decompose.router.pages/Pages<#A1>> { // com.arkivanov.decompose.router.pages/Pages.$serializer|null[0]
        constructor <init>(kotlinx.serialization/KSerializer<#A1>) // com.arkivanov.decompose.router.pages/Pages.$serializer.<init>|<init>(kotlinx.serialization.KSerializer<1:0>){}[0]

        final val descriptor // com.arkivanov.decompose.router.pages/Pages.$serializer.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // com.arkivanov.decompose.router.pages/Pages.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        final val typeSerial0 // com.arkivanov.decompose.router.pages/Pages.$serializer.typeSerial0|{}typeSerial0[0]

        final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // com.arkivanov.decompose.router.pages/Pages.$serializer.childSerializers|childSerializers(){}[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): com.arkivanov.decompose.router.pages/Pages<#A1> // com.arkivanov.decompose.router.pages/Pages.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, com.arkivanov.decompose.router.pages/Pages<#A1>) // com.arkivanov.decompose.router.pages/Pages.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;com.arkivanov.decompose.router.pages.Pages<1:0>){}[0]
        final fun typeParametersSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // com.arkivanov.decompose.router.pages/Pages.$serializer.typeParametersSerializers|typeParametersSerializers(){}[0]
    }

    final object Companion : kotlinx.serialization.internal/SerializerFactory { // com.arkivanov.decompose.router.pages/Pages.Companion|null[0]
        final val $cachedDescriptor // com.arkivanov.decompose.router.pages/Pages.Companion.$cachedDescriptor|{}$cachedDescriptor[0]
            final fun <get-$cachedDescriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // com.arkivanov.decompose.router.pages/Pages.Companion.$cachedDescriptor.<get-$cachedDescriptor>|<get-$cachedDescriptor>(){}[0]

        final fun <#A2: kotlin/Any?> serializer(kotlinx.serialization/KSerializer<#A2>): kotlinx.serialization/KSerializer<com.arkivanov.decompose.router.pages/Pages<#A2>> // com.arkivanov.decompose.router.pages/Pages.Companion.serializer|serializer(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any?>}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // com.arkivanov.decompose.router.pages/Pages.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}

final class com.arkivanov.decompose/DefaultComponentContext : com.arkivanov.decompose/ComponentContext { // com.arkivanov.decompose/DefaultComponentContext|null[0]
    constructor <init>(com.arkivanov.essenty.lifecycle/Lifecycle) // com.arkivanov.decompose/DefaultComponentContext.<init>|<init>(com.arkivanov.essenty.lifecycle.Lifecycle){}[0]
    constructor <init>(com.arkivanov.essenty.lifecycle/Lifecycle, com.arkivanov.essenty.statekeeper/StateKeeper? = ..., com.arkivanov.essenty.instancekeeper/InstanceKeeper? = ..., com.arkivanov.essenty.backhandler/BackHandler? = ...) // com.arkivanov.decompose/DefaultComponentContext.<init>|<init>(com.arkivanov.essenty.lifecycle.Lifecycle;com.arkivanov.essenty.statekeeper.StateKeeper?;com.arkivanov.essenty.instancekeeper.InstanceKeeper?;com.arkivanov.essenty.backhandler.BackHandler?){}[0]

    final val backHandler // com.arkivanov.decompose/DefaultComponentContext.backHandler|{}backHandler[0]
        final fun <get-backHandler>(): com.arkivanov.essenty.backhandler/BackHandler // com.arkivanov.decompose/DefaultComponentContext.backHandler.<get-backHandler>|<get-backHandler>(){}[0]
    final val componentContextFactory // com.arkivanov.decompose/DefaultComponentContext.componentContextFactory|{}componentContextFactory[0]
        final fun <get-componentContextFactory>(): com.arkivanov.decompose/ComponentContextFactory<com.arkivanov.decompose/ComponentContext> // com.arkivanov.decompose/DefaultComponentContext.componentContextFactory.<get-componentContextFactory>|<get-componentContextFactory>(){}[0]
    final val instanceKeeper // com.arkivanov.decompose/DefaultComponentContext.instanceKeeper|{}instanceKeeper[0]
        final fun <get-instanceKeeper>(): com.arkivanov.essenty.instancekeeper/InstanceKeeper // com.arkivanov.decompose/DefaultComponentContext.instanceKeeper.<get-instanceKeeper>|<get-instanceKeeper>(){}[0]
    final val lifecycle // com.arkivanov.decompose/DefaultComponentContext.lifecycle|{}lifecycle[0]
        final fun <get-lifecycle>(): com.arkivanov.essenty.lifecycle/Lifecycle // com.arkivanov.decompose/DefaultComponentContext.lifecycle.<get-lifecycle>|<get-lifecycle>(){}[0]
    final val stateKeeper // com.arkivanov.decompose/DefaultComponentContext.stateKeeper|{}stateKeeper[0]
        final fun <get-stateKeeper>(): com.arkivanov.essenty.statekeeper/StateKeeper // com.arkivanov.decompose/DefaultComponentContext.stateKeeper.<get-stateKeeper>|<get-stateKeeper>(){}[0]
}

sealed class <#A: out kotlin/Any, #B: out kotlin/Any> com.arkivanov.decompose/Child { // com.arkivanov.decompose/Child|null[0]
    abstract val configuration // com.arkivanov.decompose/Child.configuration|{}configuration[0]
        abstract fun <get-configuration>(): #A // com.arkivanov.decompose/Child.configuration.<get-configuration>|<get-configuration>(){}[0]
    abstract val instance // com.arkivanov.decompose/Child.instance|{}instance[0]
        abstract fun <get-instance>(): #B? // com.arkivanov.decompose/Child.instance.<get-instance>|<get-instance>(){}[0]

    final class <#A1: out kotlin/Any, #B1: out kotlin/Any> Created : com.arkivanov.decompose/Child<#A1, #B1> { // com.arkivanov.decompose/Child.Created|null[0]
        constructor <init>(#A1, #B1) // com.arkivanov.decompose/Child.Created.<init>|<init>(1:0;1:1){}[0]

        final val configuration // com.arkivanov.decompose/Child.Created.configuration|{}configuration[0]
            final fun <get-configuration>(): #A1 // com.arkivanov.decompose/Child.Created.configuration.<get-configuration>|<get-configuration>(){}[0]
        final val instance // com.arkivanov.decompose/Child.Created.instance|{}instance[0]
            final fun <get-instance>(): #B1 // com.arkivanov.decompose/Child.Created.instance.<get-instance>|<get-instance>(){}[0]

        final fun component1(): #A1 // com.arkivanov.decompose/Child.Created.component1|component1(){}[0]
        final fun component2(): #B1 // com.arkivanov.decompose/Child.Created.component2|component2(){}[0]
        final fun copy(#A1 = ..., #B1 = ...): com.arkivanov.decompose/Child.Created<#A1, #B1> // com.arkivanov.decompose/Child.Created.copy|copy(1:0;1:1){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose/Child.Created.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.arkivanov.decompose/Child.Created.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.arkivanov.decompose/Child.Created.toString|toString(){}[0]
    }

    final class <#A1: out kotlin/Any> Destroyed : com.arkivanov.decompose/Child<#A1, kotlin/Nothing> { // com.arkivanov.decompose/Child.Destroyed|null[0]
        constructor <init>(#A1) // com.arkivanov.decompose/Child.Destroyed.<init>|<init>(1:0){}[0]

        final val configuration // com.arkivanov.decompose/Child.Destroyed.configuration|{}configuration[0]
            final fun <get-configuration>(): #A1 // com.arkivanov.decompose/Child.Destroyed.configuration.<get-configuration>|<get-configuration>(){}[0]
        final val instance // com.arkivanov.decompose/Child.Destroyed.instance|{}instance[0]
            final fun <get-instance>(): kotlin/Nothing? // com.arkivanov.decompose/Child.Destroyed.instance.<get-instance>|<get-instance>(){}[0]

        final fun component1(): #A1 // com.arkivanov.decompose/Child.Destroyed.component1|component1(){}[0]
        final fun copy(#A1 = ...): com.arkivanov.decompose/Child.Destroyed<#A1> // com.arkivanov.decompose/Child.Destroyed.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.arkivanov.decompose/Child.Destroyed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.arkivanov.decompose/Child.Destroyed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.arkivanov.decompose/Child.Destroyed.toString|toString(){}[0]
    }
}

final object com.arkivanov.decompose/DecomposeExperimentFlags // com.arkivanov.decompose/DecomposeExperimentFlags|null[0]

final val com.arkivanov.decompose.router.panels/isDual // com.arkivanov.decompose.router.panels/isDual|@com.arkivanov.decompose.router.panels.ChildPanelsMode{}isDual[0]
    final fun (com.arkivanov.decompose.router.panels/ChildPanelsMode).<get-isDual>(): kotlin/Boolean // com.arkivanov.decompose.router.panels/isDual.<get-isDual>|<get-isDual>@com.arkivanov.decompose.router.panels.ChildPanelsMode(){}[0]
final val com.arkivanov.decompose.router.panels/isSingle // com.arkivanov.decompose.router.panels/isSingle|@com.arkivanov.decompose.router.panels.ChildPanelsMode{}isSingle[0]
    final fun (com.arkivanov.decompose.router.panels/ChildPanelsMode).<get-isSingle>(): kotlin/Boolean // com.arkivanov.decompose.router.panels/isSingle.<get-isSingle>|<get-isSingle>@com.arkivanov.decompose.router.panels.ChildPanelsMode(){}[0]
final val com.arkivanov.decompose.router.panels/isTriple // com.arkivanov.decompose.router.panels/isTriple|@com.arkivanov.decompose.router.panels.ChildPanelsMode{}isTriple[0]
    final fun (com.arkivanov.decompose.router.panels/ChildPanelsMode).<get-isTriple>(): kotlin/Boolean // com.arkivanov.decompose.router.panels/isTriple.<get-isTriple>|<get-isTriple>@com.arkivanov.decompose.router.panels.ChildPanelsMode(){}[0]
final val com.arkivanov.decompose.router.slot/child // com.arkivanov.decompose.router.slot/child|@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.slot.ChildSlot<0:0,0:1>>{0§<kotlin.Any>;1§<kotlin.Any>}child[0]
    final fun <#A1: kotlin/Any, #B1: kotlin/Any> (com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.slot/ChildSlot<#A1, #B1>>).<get-child>(): com.arkivanov.decompose/Child.Created<#A1, #B1>? // com.arkivanov.decompose.router.slot/child.<get-child>|<get-child>@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.slot.ChildSlot<0:0,0:1>>(){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final val com.arkivanov.decompose.router.stack/active // com.arkivanov.decompose.router.stack/active|@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>{0§<kotlin.Any>;1§<kotlin.Any>}active[0]
    final fun <#A1: kotlin/Any, #B1: kotlin/Any> (com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#A1, #B1>>).<get-active>(): com.arkivanov.decompose/Child.Created<#A1, #B1> // com.arkivanov.decompose.router.stack/active.<get-active>|<get-active>@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>(){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final val com.arkivanov.decompose.router.stack/backStack // com.arkivanov.decompose.router.stack/backStack|@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>{0§<kotlin.Any>;1§<kotlin.Any>}backStack[0]
    final fun <#A1: kotlin/Any, #B1: kotlin/Any> (com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#A1, #B1>>).<get-backStack>(): kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A1, #B1>> // com.arkivanov.decompose.router.stack/backStack.<get-backStack>|<get-backStack>@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>(){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final val com.arkivanov.decompose.router.stack/items // com.arkivanov.decompose.router.stack/items|@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>{0§<kotlin.Any>;1§<kotlin.Any>}items[0]
    final fun <#A1: kotlin/Any, #B1: kotlin/Any> (com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#A1, #B1>>).<get-items>(): kotlin.collections/List<com.arkivanov.decompose/Child.Created<#A1, #B1>> // com.arkivanov.decompose.router.stack/items.<get-items>|<get-items>@com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>(){0§<kotlin.Any>;1§<kotlin.Any>}[0]

final var com.arkivanov.decompose.errorhandler/onDecomposeError // com.arkivanov.decompose.errorhandler/onDecomposeError|{}onDecomposeError[0]
    final fun <get-onDecomposeError>(): kotlin/Function1<kotlin/Exception, kotlin/Unit> // com.arkivanov.decompose.errorhandler/onDecomposeError.<get-onDecomposeError>|<get-onDecomposeError>(){}[0]
    final fun <set-onDecomposeError>(kotlin/Function1<kotlin/Exception, kotlin/Unit>) // com.arkivanov.decompose.errorhandler/onDecomposeError.<set-onDecomposeError>|<set-onDecomposeError>(kotlin.Function1<kotlin.Exception,kotlin.Unit>){}[0]

final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: com.arkivanov.decompose.router.children/NavState<#B>, #F: kotlin/Any> (#A).com.arkivanov.decompose.router.children/children(com.arkivanov.decompose.router.children/NavigationSource<#D>, kotlin/String, kotlin/Function0<#E>, kotlin/Function1<#E, com.arkivanov.essenty.statekeeper/SerializableContainer?>, kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, #E?>, kotlin/Function2<#E, #D, #E>, kotlin/Function2<#E, kotlin.collections/List<com.arkivanov.decompose/Child<#B, #C>>, #F>, kotlin/Function2<#E, #E?, kotlin/Unit> = ..., kotlin/Function3<#D, #E, #E, kotlin/Unit> = ..., kotlin/Function1<#E, kotlin/Function0<#E>?> = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<#F> // com.arkivanov.decompose.router.children/children|children@0:0(com.arkivanov.decompose.router.children.NavigationSource<0:3>;kotlin.String;kotlin.Function0<0:4>;kotlin.Function1<0:4,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,0:4?>;kotlin.Function2<0:4,0:3,0:4>;kotlin.Function2<0:4,kotlin.collections.List<com.arkivanov.decompose.Child<0:1,0:2>>,0:5>;kotlin.Function2<0:4,0:4?,kotlin.Unit>;kotlin.Function3<0:3,0:4,0:4,kotlin.Unit>;kotlin.Function1<0:4,kotlin.Function0<0:4>?>;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<com.arkivanov.decompose.router.children.NavState<0:1>>;5§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: com.arkivanov.decompose.router.children/NavState<#B>, #F: kotlin/Any> (#A).com.arkivanov.decompose.router.children/children(com.arkivanov.decompose.router.children/NavigationSource<#D>, kotlinx.serialization/KSerializer<#E>?, kotlin/Function0<#E>, kotlin/String, kotlin/Function2<#E, #D, #E>, kotlin/Function2<#E, kotlin.collections/List<com.arkivanov.decompose/Child<#B, #C>>, #F>, kotlin/Function2<#E, #E?, kotlin/Unit> = ..., kotlin/Function3<#D, #E, #E, kotlin/Unit> = ..., kotlin/Function1<#E, kotlin/Function0<#E>?> = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<#F> // com.arkivanov.decompose.router.children/children|children@0:0(com.arkivanov.decompose.router.children.NavigationSource<0:3>;kotlinx.serialization.KSerializer<0:4>?;kotlin.Function0<0:4>;kotlin.String;kotlin.Function2<0:4,0:3,0:4>;kotlin.Function2<0:4,kotlin.collections.List<com.arkivanov.decompose.Child<0:1,0:2>>,0:5>;kotlin.Function2<0:4,0:4?,kotlin.Unit>;kotlin.Function3<0:3,0:4,0:4,kotlin.Unit>;kotlin.Function1<0:4,kotlin.Function0<0:4>?>;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<com.arkivanov.decompose.router.children.NavState<0:1>>;5§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: kotlin/Any, #F: kotlin/Any, #G: kotlin/Any> (#A).com.arkivanov.decompose.router.panels/childPanels(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.panels/PanelsNavigation.Event<#B, #D, #F>>, kotlin/Function0<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>>, kotlin/Function1<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>, com.arkivanov.essenty.statekeeper/SerializableContainer?>, kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>?>, kotlin/String = ..., kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>, com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>?, kotlin/Unit> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>, kotlin/Function2<#D, #A, #E>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.panels/ChildPanels<#B, #C, #D, #E, #F, #G>> // com.arkivanov.decompose.router.panels/childPanels|childPanels@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.panels.PanelsNavigation.Event<0:1,0:3,0:5>>;kotlin.Function0<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>>;kotlin.Function1<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>?>;kotlin.String;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>,com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>?,kotlin.Unit>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>;kotlin.Function2<0:3,0:0,0:4>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<kotlin.Any>;5§<kotlin.Any>;6§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: kotlin/Any, #F: kotlin/Any, #G: kotlin/Any> (#A).com.arkivanov.decompose.router.panels/childPanels(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.panels/PanelsNavigation.Event<#B, #D, #F>>, kotlin/Function0<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>>, kotlin/Function1<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>, com.arkivanov.essenty.statekeeper/SerializableContainer?>, kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>?>, kotlin/String = ..., kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>, com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>?, kotlin/Unit> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>, kotlin/Function2<#D, #A, #E>, kotlin/Function2<#F, #A, #G>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.panels/ChildPanels<#B, #C, #D, #E, #F, #G>> // com.arkivanov.decompose.router.panels/childPanels|childPanels@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.panels.PanelsNavigation.Event<0:1,0:3,0:5>>;kotlin.Function0<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>>;kotlin.Function1<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>?>;kotlin.String;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>,com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>?,kotlin.Unit>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>;kotlin.Function2<0:3,0:0,0:4>;kotlin.Function2<0:5,0:0,0:6>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<kotlin.Any>;5§<kotlin.Any>;6§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: kotlin/Any, #F: kotlin/Any, #G: kotlin/Any> (#A).com.arkivanov.decompose.router.panels/childPanels(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.panels/PanelsNavigation.Event<#B, #D, #F>>, kotlin/Triple<kotlinx.serialization/KSerializer<#B>, kotlinx.serialization/KSerializer<#D>, kotlinx.serialization/KSerializer<#F>>?, kotlin/Function0<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>>, kotlin/String = ..., kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>, com.arkivanov.decompose.router.panels/Panels<#B, #D, #F>?, kotlin/Unit> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>, kotlin/Function2<#D, #A, #E>, kotlin/Function2<#F, #A, #G>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.panels/ChildPanels<#B, #C, #D, #E, #F, #G>> // com.arkivanov.decompose.router.panels/childPanels|childPanels@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.panels.PanelsNavigation.Event<0:1,0:3,0:5>>;kotlin.Triple<kotlinx.serialization.KSerializer<0:1>,kotlinx.serialization.KSerializer<0:3>,kotlinx.serialization.KSerializer<0:5>>?;kotlin.Function0<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>>;kotlin.String;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>,com.arkivanov.decompose.router.panels.Panels<0:1,0:3,0:5>?,kotlin.Unit>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>;kotlin.Function2<0:3,0:0,0:4>;kotlin.Function2<0:5,0:0,0:6>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<kotlin.Any>;5§<kotlin.Any>;6§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: kotlin/Any> (#A).com.arkivanov.decompose.router.panels/childPanels(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.panels/PanelsNavigation.Event<#B, #D, kotlin/Nothing>>, kotlin/Pair<kotlinx.serialization/KSerializer<#B>, kotlinx.serialization/KSerializer<#D>>?, kotlin/Function0<com.arkivanov.decompose.router.panels/Panels<#B, #D, kotlin/Nothing>>, kotlin/String = ..., kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#B, #D, kotlin/Nothing>, com.arkivanov.decompose.router.panels/Panels<#B, #D, kotlin/Nothing>?, kotlin/Unit> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>, kotlin/Function2<#D, #A, #E>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.panels/ChildPanels<#B, #C, #D, #E, kotlin/Nothing, kotlin/Nothing>> // com.arkivanov.decompose.router.panels/childPanels|childPanels@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.panels.PanelsNavigation.Event<0:1,0:3,kotlin.Nothing>>;kotlin.Pair<kotlinx.serialization.KSerializer<0:1>,kotlinx.serialization.KSerializer<0:3>>?;kotlin.Function0<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,kotlin.Nothing>>;kotlin.String;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:1,0:3,kotlin.Nothing>,com.arkivanov.decompose.router.panels.Panels<0:1,0:3,kotlin.Nothing>?,kotlin.Unit>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>;kotlin.Function2<0:3,0:0,0:4>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.items/childItems(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.items/ItemsNavigation.Event<#B>>, com.arkivanov.decompose.router.children/NavStateSaver<com.arkivanov.decompose.router.items/Items<#B>>?, kotlin/Function0<com.arkivanov.decompose.router.items/Items<#B>>, kotlin/String = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.router.items/LazyChildItems<#B, #C> // com.arkivanov.decompose.router.items/childItems|childItems@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.items.ItemsNavigation.Event<0:1>>;com.arkivanov.decompose.router.children.NavStateSaver<com.arkivanov.decompose.router.items.Items<0:1>>?;kotlin.Function0<com.arkivanov.decompose.router.items.Items<0:1>>;kotlin.String;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.items/childItems(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.items/ItemsNavigation.Event<#B>>, kotlinx.serialization/KSerializer<#B>?, kotlin/Function0<com.arkivanov.decompose.router.items/Items<#B>>, kotlin/String = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.router.items/LazyChildItems<#B, #C> // com.arkivanov.decompose.router.items/childItems|childItems@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.items.ItemsNavigation.Event<0:1>>;kotlinx.serialization.KSerializer<0:1>?;kotlin.Function0<com.arkivanov.decompose.router.items.Items<0:1>>;kotlin.String;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.pages/childPages(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.pages/PagesNavigation.Event<#B>>, kotlin/Function0<com.arkivanov.decompose.router.pages/Pages<#B>>, kotlin/Function1<com.arkivanov.decompose.router.pages/Pages<#B>, com.arkivanov.essenty.statekeeper/SerializableContainer?>, kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, com.arkivanov.decompose.router.pages/Pages<#B>?>, kotlin/String = ..., kotlin/Function2<kotlin/Int, com.arkivanov.decompose.router.pages/Pages<#B>, com.arkivanov.decompose.router.children/ChildNavState.Status> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.pages/ChildPages<#B, #C>> // com.arkivanov.decompose.router.pages/childPages|childPages@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.pages.PagesNavigation.Event<0:1>>;kotlin.Function0<com.arkivanov.decompose.router.pages.Pages<0:1>>;kotlin.Function1<com.arkivanov.decompose.router.pages.Pages<0:1>,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,com.arkivanov.decompose.router.pages.Pages<0:1>?>;kotlin.String;kotlin.Function2<kotlin.Int,com.arkivanov.decompose.router.pages.Pages<0:1>,com.arkivanov.decompose.router.children.ChildNavState.Status>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.pages/childPages(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.pages/PagesNavigation.Event<#B>>, kotlinx.serialization/KSerializer<#B>?, kotlin/Function0<com.arkivanov.decompose.router.pages/Pages<#B>> = ..., kotlin/String = ..., kotlin/Function2<kotlin/Int, com.arkivanov.decompose.router.pages/Pages<#B>, com.arkivanov.decompose.router.children/ChildNavState.Status> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.pages/ChildPages<#B, #C>> // com.arkivanov.decompose.router.pages/childPages|childPages@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.pages.PagesNavigation.Event<0:1>>;kotlinx.serialization.KSerializer<0:1>?;kotlin.Function0<com.arkivanov.decompose.router.pages.Pages<0:1>>;kotlin.String;kotlin.Function2<kotlin.Int,com.arkivanov.decompose.router.pages.Pages<0:1>,com.arkivanov.decompose.router.children.ChildNavState.Status>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.slot/childSlot(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.slot/SlotNavigation.Event<#B>>, kotlin/Function1<#B?, com.arkivanov.essenty.statekeeper/SerializableContainer?>, kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, #B?>, kotlin/String = ..., kotlin/Function0<#B?> = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.slot/ChildSlot<#B, #C>> // com.arkivanov.decompose.router.slot/childSlot|childSlot@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.slot.SlotNavigation.Event<0:1>>;kotlin.Function1<0:1?,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,0:1?>;kotlin.String;kotlin.Function0<0:1?>;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.slot/childSlot(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.slot/SlotNavigation.Event<#B>>, kotlinx.serialization/KSerializer<#B>?, kotlin/Function0<#B?> = ..., kotlin/String = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.slot/ChildSlot<#B, #C>> // com.arkivanov.decompose.router.slot/childSlot|childSlot@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.slot.SlotNavigation.Event<0:1>>;kotlinx.serialization.KSerializer<0:1>?;kotlin.Function0<0:1?>;kotlin.String;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.stack/childStack(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.stack/StackNavigation.Event<#B>>, kotlin/Function0<kotlin.collections/List<#B>>, kotlin/Function1<kotlin.collections/List<#B>, com.arkivanov.essenty.statekeeper/SerializableContainer?>, kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, kotlin.collections/List<#B>?>, kotlin/String = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#B, #C>> // com.arkivanov.decompose.router.stack/childStack|childStack@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.stack.StackNavigation.Event<0:1>>;kotlin.Function0<kotlin.collections.List<0:1>>;kotlin.Function1<kotlin.collections.List<0:1>,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,kotlin.collections.List<0:1>?>;kotlin.String;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.stack/childStack(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.stack/StackNavigation.Event<#B>>, kotlinx.serialization/KSerializer<#B>?, #B, kotlin/String = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#B, #C>> // com.arkivanov.decompose.router.stack/childStack|childStack@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.stack.StackNavigation.Event<0:1>>;kotlinx.serialization.KSerializer<0:1>?;0:1;kotlin.String;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>, #B: kotlin/Any, #C: kotlin/Any> (#A).com.arkivanov.decompose.router.stack/childStack(com.arkivanov.decompose.router.children/NavigationSource<com.arkivanov.decompose.router.stack/StackNavigation.Event<#B>>, kotlinx.serialization/KSerializer<#B>?, kotlin/Function0<kotlin.collections/List<#B>>, kotlin/String = ..., kotlin/Boolean = ..., kotlin/Function2<#B, #A, #C>): com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#B, #C>> // com.arkivanov.decompose.router.stack/childStack|childStack@0:0(com.arkivanov.decompose.router.children.NavigationSource<com.arkivanov.decompose.router.stack.StackNavigation.Event<0:1>>;kotlinx.serialization.KSerializer<0:1>?;kotlin.Function0<kotlin.collections.List<0:1>>;kotlin.String;kotlin.Boolean;kotlin.Function2<0:1,0:0,0:2>){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>> (#A).com.arkivanov.decompose/childContext(kotlin/String, com.arkivanov.essenty.lifecycle/Lifecycle? = ...): #A // com.arkivanov.decompose/childContext|childContext@0:0(kotlin.String;com.arkivanov.essenty.lifecycle.Lifecycle?){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>}[0]
final fun <#A: com.arkivanov.decompose/GenericComponentContext<#A>> (#A).com.arkivanov.decompose/childContext(kotlin/String, com.arkivanov.essenty.lifecycle/Lifecycle? = ..., kotlin/Int): #A // com.arkivanov.decompose/childContext|childContext@0:0(kotlin.String;com.arkivanov.essenty.lifecycle.Lifecycle?;kotlin.Int){0§<com.arkivanov.decompose.GenericComponentContext<0:0>>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any, #E: kotlin/Any, #F: kotlin/Any> com.arkivanov.decompose.router.panels/childPanelsWebNavigation(com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #C, #E>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, #E, #F>>, kotlin/Triple<kotlinx.serialization/KSerializer<#A>, kotlinx.serialization/KSerializer<#C>, kotlinx.serialization/KSerializer<#E>>, kotlin/Function1<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, #E, #F>, kotlin/String?> = ..., kotlin/Function1<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, #E, #F>, kotlin.collections/Map<kotlin/String, kotlin/String>?> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlin/Function1<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, #E, #F>, com.arkivanov.decompose.router.webhistory/WebNavigationOwner?> = ...): com.arkivanov.decompose.router.webhistory/WebNavigation<*> // com.arkivanov.decompose.router.panels/childPanelsWebNavigation|childPanelsWebNavigation(com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:2,0:4>;com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,0:4,0:5>>;kotlin.Triple<kotlinx.serialization.KSerializer<0:0>,kotlinx.serialization.KSerializer<0:2>,kotlinx.serialization.KSerializer<0:4>>;kotlin.Function1<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,0:4,0:5>,kotlin.String?>;kotlin.Function1<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,0:4,0:5>,kotlin.collections.Map<kotlin.String,kotlin.String>?>;kotlin.Function0<kotlin.Boolean>;kotlin.Function1<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,0:4,0:5>,com.arkivanov.decompose.router.webhistory.WebNavigationOwner?>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>;4§<kotlin.Any>;5§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any, #D: kotlin/Any> com.arkivanov.decompose.router.panels/childPanelsWebNavigation(com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #C, kotlin/Nothing>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, kotlin/Nothing, kotlin/Nothing>>, kotlin/Pair<kotlinx.serialization/KSerializer<#A>, kotlinx.serialization/KSerializer<#C>>, kotlin/Function1<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, kotlin/Nothing, kotlin/Nothing>, kotlin/String?> = ..., kotlin/Function1<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, kotlin/Nothing, kotlin/Nothing>, kotlin.collections/Map<kotlin/String, kotlin/String>?> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlin/Function1<com.arkivanov.decompose.router.panels/ChildPanels<#A, #B, #C, #D, kotlin/Nothing, kotlin/Nothing>, com.arkivanov.decompose.router.webhistory/WebNavigationOwner?> = ...): com.arkivanov.decompose.router.webhistory/WebNavigation<*> // com.arkivanov.decompose.router.panels/childPanelsWebNavigation|childPanelsWebNavigation(com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:2,kotlin.Nothing>;com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,kotlin.Nothing,kotlin.Nothing>>;kotlin.Pair<kotlinx.serialization.KSerializer<0:0>,kotlinx.serialization.KSerializer<0:2>>;kotlin.Function1<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,kotlin.Nothing,kotlin.Nothing>,kotlin.String?>;kotlin.Function1<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,kotlin.Nothing,kotlin.Nothing>,kotlin.collections.Map<kotlin.String,kotlin.String>?>;kotlin.Function0<kotlin.Boolean>;kotlin.Function1<com.arkivanov.decompose.router.panels.ChildPanels<0:0,0:1,0:2,0:3,kotlin.Nothing,kotlin.Nothing>,com.arkivanov.decompose.router.webhistory.WebNavigationOwner?>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>;3§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/activateDetails(#B, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/activateDetails|activateDetails@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(0:1;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/activateExtra(#C, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/activateExtra|activateExtra@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(0:2;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/activateMain(#A, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/activateMain|activateMain@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(0:0;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/dismissDetails(kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/dismissDetails|dismissDetails@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/dismissExtra(kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/dismissExtra|dismissExtra@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/navigate(#A, #B?, #C?, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/navigate|navigate@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(0:0;0:1?;0:2?;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/navigate(#B?, #C?, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/navigate|navigate@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(0:1?;0:2?;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/navigate(#C?, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/navigate|navigate@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(0:2?;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/navigate(kotlin/Function1<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>>) // com.arkivanov.decompose.router.panels/navigate|navigate@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(kotlin.Function1<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/pop(kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/pop|pop@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> (com.arkivanov.decompose.router.panels/PanelsNavigator<#A, #B, #C>).com.arkivanov.decompose.router.panels/setMode(com.arkivanov.decompose.router.panels/ChildPanelsMode, kotlin/Function2<com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, com.arkivanov.decompose.router.panels/Panels<#A, #B, #C>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.panels/setMode|setMode@com.arkivanov.decompose.router.panels.PanelsNavigator<0:0,0:1,0:2>(com.arkivanov.decompose.router.panels.ChildPanelsMode;kotlin.Function2<com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,com.arkivanov.decompose.router.panels.Panels<0:0,0:1,0:2>,kotlin.Unit>){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any, #C: kotlin/Any> com.arkivanov.decompose.router.panels/PanelsNavigation(): com.arkivanov.decompose.router.panels/PanelsNavigation<#A, #B, #C> // com.arkivanov.decompose.router.panels/PanelsNavigation|PanelsNavigation(){0§<kotlin.Any>;1§<kotlin.Any>;2§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any> (com.arkivanov.decompose.value/Value<#A>).com.arkivanov.decompose.value.operator/map(kotlin/Function1<#A, #B>): com.arkivanov.decompose.value/Value<#B> // com.arkivanov.decompose.value.operator/map|map@com.arkivanov.decompose.value.Value<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any> com.arkivanov.decompose.router.pages/childPagesWebNavigation(com.arkivanov.decompose.router.pages/PagesNavigator<#A>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.pages/ChildPages<#A, #B>>, kotlinx.serialization/KSerializer<#A>, kotlin/Function1<com.arkivanov.decompose.router.pages/ChildPages<#A, #B>, kotlin/String?> = ..., kotlin/Function1<com.arkivanov.decompose.router.pages/ChildPages<#A, #B>, kotlin.collections/Map<kotlin/String, kotlin/String>?> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlin/Function1<com.arkivanov.decompose/Child.Created<#A, #B>, com.arkivanov.decompose.router.webhistory/WebNavigationOwner?> = ...): com.arkivanov.decompose.router.webhistory/WebNavigation<*> // com.arkivanov.decompose.router.pages/childPagesWebNavigation|childPagesWebNavigation(com.arkivanov.decompose.router.pages.PagesNavigator<0:0>;com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.pages.ChildPages<0:0,0:1>>;kotlinx.serialization.KSerializer<0:0>;kotlin.Function1<com.arkivanov.decompose.router.pages.ChildPages<0:0,0:1>,kotlin.String?>;kotlin.Function1<com.arkivanov.decompose.router.pages.ChildPages<0:0,0:1>,kotlin.collections.Map<kotlin.String,kotlin.String>?>;kotlin.Function0<kotlin.Boolean>;kotlin.Function1<com.arkivanov.decompose.Child.Created<0:0,0:1>,com.arkivanov.decompose.router.webhistory.WebNavigationOwner?>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any> com.arkivanov.decompose.router.stack/childStackWebNavigation(com.arkivanov.decompose.router.stack/StackNavigator<#A>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#A, #B>>, kotlinx.serialization/KSerializer<#A>, kotlin/Boolean = ..., kotlin/Function1<com.arkivanov.decompose/Child.Created<#A, #B>, kotlin/String?> = ..., kotlin/Function1<com.arkivanov.decompose/Child.Created<#A, #B>, kotlin.collections/Map<kotlin/String, kotlin/String>?> = ..., kotlin/Function0<kotlin/Boolean> = ..., kotlin/Function1<com.arkivanov.decompose/Child.Created<#A, #B>, com.arkivanov.decompose.router.webhistory/WebNavigationOwner?> = ...): com.arkivanov.decompose.router.webhistory/WebNavigation<*> // com.arkivanov.decompose.router.stack/childStackWebNavigation|childStackWebNavigation(com.arkivanov.decompose.router.stack.StackNavigator<0:0>;com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,0:1>>;kotlinx.serialization.KSerializer<0:0>;kotlin.Boolean;kotlin.Function1<com.arkivanov.decompose.Child.Created<0:0,0:1>,kotlin.String?>;kotlin.Function1<com.arkivanov.decompose.Child.Created<0:0,0:1>,kotlin.collections.Map<kotlin.String,kotlin.String>?>;kotlin.Function0<kotlin.Boolean>;kotlin.Function1<com.arkivanov.decompose.Child.Created<0:0,0:1>,com.arkivanov.decompose.router.webhistory.WebNavigationOwner?>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.items/ItemsNavigator<#A>).com.arkivanov.decompose.router.items/navigate(kotlin/Function1<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>>) // com.arkivanov.decompose.router.items/navigate|navigate@com.arkivanov.decompose.router.items.ItemsNavigator<0:0>(kotlin.Function1<com.arkivanov.decompose.router.items.Items<0:0>,com.arkivanov.decompose.router.items.Items<0:0>>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/clear(kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/clear|clear@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/navigate(kotlin/Function1<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>>) // com.arkivanov.decompose.router.pages/navigate|navigate@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Function1<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/select(kotlin/Int, kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/select|select@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Int;kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/selectFirst(kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/selectFirst|selectFirst@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/selectLast(kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/selectLast|selectLast@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/selectNext(kotlin/Boolean = ..., kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/selectNext|selectNext@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Boolean;kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/selectPrev(kotlin/Boolean = ..., kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit> = ...) // com.arkivanov.decompose.router.pages/selectPrev|selectPrev@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Boolean;kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.slot/SlotNavigator<#A>).com.arkivanov.decompose.router.slot/navigate(kotlin/Function1<#A?, #A?>) // com.arkivanov.decompose.router.slot/navigate|navigate@com.arkivanov.decompose.router.slot.SlotNavigator<0:0>(kotlin.Function1<0:0?,0:0?>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/navigate(kotlin/Function1<kotlin.collections/List<#A>, kotlin.collections/List<#A>>) // com.arkivanov.decompose.router.stack/navigate|navigate@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(kotlin.Function1<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.value/MutableValue<#A>).com.arkivanov.decompose.value/getAndUpdate(kotlin/Function1<#A, #A>): #A // com.arkivanov.decompose.value/getAndUpdate|getAndUpdate@com.arkivanov.decompose.value.MutableValue<0:0>(kotlin.Function1<0:0,0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.value/MutableValue<#A>).com.arkivanov.decompose.value/update(kotlin/Function1<#A, #A>) // com.arkivanov.decompose.value/update|update@com.arkivanov.decompose.value.MutableValue<0:0>(kotlin.Function1<0:0,0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.value/MutableValue<#A>).com.arkivanov.decompose.value/updateAndGet(kotlin/Function1<#A, #A>): #A // com.arkivanov.decompose.value/updateAndGet|updateAndGet@com.arkivanov.decompose.value.MutableValue<0:0>(kotlin.Function1<0:0,0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.value/Value<#A>).com.arkivanov.decompose.value/getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A // com.arkivanov.decompose.value/getValue|getValue@com.arkivanov.decompose.value.Value<0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.arkivanov.decompose.value/Value<#A>).com.arkivanov.decompose.value/subscribe(com.arkivanov.essenty.lifecycle/Lifecycle, com.arkivanov.decompose.value/ObserveLifecycleMode = ..., kotlin/Function1<#A, kotlin/Unit>) // com.arkivanov.decompose.value/subscribe|subscribe@com.arkivanov.decompose.value.Value<0:0>(com.arkivanov.essenty.lifecycle.Lifecycle;com.arkivanov.decompose.value.ObserveLifecycleMode;kotlin.Function1<0:0,kotlin.Unit>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.router.children/NavStateSaver(kotlinx.serialization/KSerializer<#A>): com.arkivanov.decompose.router.children/NavStateSaver<#A> // com.arkivanov.decompose.router.children/NavStateSaver|NavStateSaver(kotlinx.serialization.KSerializer<0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.router.children/transientNavStateSaver(): com.arkivanov.decompose.router.children/NavStateSaver<#A> // com.arkivanov.decompose.router.children/transientNavStateSaver|transientNavStateSaver(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.router.items/ItemsNavigation(): com.arkivanov.decompose.router.items/ItemsNavigation<#A> // com.arkivanov.decompose.router.items/ItemsNavigation|ItemsNavigation(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.router.pages/PagesNavigation(): com.arkivanov.decompose.router.pages/PagesNavigation<#A> // com.arkivanov.decompose.router.pages/PagesNavigation|PagesNavigation(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.router.slot/SlotNavigation(): com.arkivanov.decompose.router.slot/SlotNavigation<#A> // com.arkivanov.decompose.router.slot/SlotNavigation|SlotNavigation(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.router.stack/StackNavigation(): com.arkivanov.decompose.router.stack/StackNavigation<#A> // com.arkivanov.decompose.router.stack/StackNavigation|StackNavigation(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.arkivanov.decompose.value/MutableValue(#A): com.arkivanov.decompose.value/MutableValue<#A> // com.arkivanov.decompose.value/MutableValue|MutableValue(0:0){0§<kotlin.Any>}[0]
final fun com.arkivanov.decompose.router.pages/getDefaultPageStatus(kotlin/Int, com.arkivanov.decompose.router.pages/Pages<*>): com.arkivanov.decompose.router.children/ChildNavState.Status // com.arkivanov.decompose.router.pages/getDefaultPageStatus|getDefaultPageStatus(kotlin.Int;com.arkivanov.decompose.router.pages.Pages<*>){}[0]
final inline fun (com.arkivanov.decompose.router.slot/SlotNavigator<*>).com.arkivanov.decompose.router.slot/dismiss(crossinline kotlin/Function1<kotlin/Boolean, kotlin/Unit> = ...) // com.arkivanov.decompose.router.slot/dismiss|dismiss@com.arkivanov.decompose.router.slot.SlotNavigator<*>(kotlin.Function1<kotlin.Boolean,kotlin.Unit>){}[0]
final inline fun (com.arkivanov.decompose.router.stack/StackNavigator<*>).com.arkivanov.decompose.router.stack/popToFirst(crossinline kotlin/Function1<kotlin/Boolean, kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/popToFirst|popToFirst@com.arkivanov.decompose.router.stack.StackNavigator<*>(kotlin.Function1<kotlin.Boolean,kotlin.Unit>){}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.items/ItemsNavigator<#A>).com.arkivanov.decompose.router.items/setActiveItems(crossinline kotlin/Function1<kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>, kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>>) // com.arkivanov.decompose.router.items/setActiveItems|setActiveItems@com.arkivanov.decompose.router.items.ItemsNavigator<0:0>(kotlin.Function1<kotlin.collections.Map<0:0,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>,kotlin.collections.Map<0:0,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.items/ItemsNavigator<#A>).com.arkivanov.decompose.router.items/setActiveItems(crossinline kotlin/Function1<kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>, kotlin.collections/Map<#A, com.arkivanov.decompose.router.items/Items.ActiveLifecycleState>>, crossinline kotlin/Function2<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.items/setActiveItems|setActiveItems@com.arkivanov.decompose.router.items.ItemsNavigator<0:0>(kotlin.Function1<kotlin.collections.Map<0:0,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>,kotlin.collections.Map<0:0,com.arkivanov.decompose.router.items.Items.ActiveLifecycleState>>;kotlin.Function2<com.arkivanov.decompose.router.items.Items<0:0>,com.arkivanov.decompose.router.items.Items<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.items/ItemsNavigator<#A>).com.arkivanov.decompose.router.items/setItems(crossinline kotlin/Function1<kotlin.collections/List<#A>, kotlin.collections/List<#A>>) // com.arkivanov.decompose.router.items/setItems|setItems@com.arkivanov.decompose.router.items.ItemsNavigator<0:0>(kotlin.Function1<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.items/ItemsNavigator<#A>).com.arkivanov.decompose.router.items/setItems(crossinline kotlin/Function1<kotlin.collections/List<#A>, kotlin.collections/List<#A>>, crossinline kotlin/Function2<com.arkivanov.decompose.router.items/Items<#A>, com.arkivanov.decompose.router.items/Items<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.items/setItems|setItems@com.arkivanov.decompose.router.items.ItemsNavigator<0:0>(kotlin.Function1<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>>;kotlin.Function2<com.arkivanov.decompose.router.items.Items<0:0>,com.arkivanov.decompose.router.items.Items<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/setItems(crossinline kotlin/Function1<kotlin.collections/List<#A>, kotlin.collections/List<#A>>) // com.arkivanov.decompose.router.pages/setItems|setItems@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Function1<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.pages/PagesNavigator<#A>).com.arkivanov.decompose.router.pages/setItems(crossinline kotlin/Function1<kotlin.collections/List<#A>, kotlin.collections/List<#A>>, crossinline kotlin/Function2<com.arkivanov.decompose.router.pages/Pages<#A>, com.arkivanov.decompose.router.pages/Pages<#A>, kotlin/Unit>) // com.arkivanov.decompose.router.pages/setItems|setItems@com.arkivanov.decompose.router.pages.PagesNavigator<0:0>(kotlin.Function1<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>>;kotlin.Function2<com.arkivanov.decompose.router.pages.Pages<0:0>,com.arkivanov.decompose.router.pages.Pages<0:0>,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.slot/SlotNavigator<#A>).com.arkivanov.decompose.router.slot/activate(#A, crossinline kotlin/Function0<kotlin/Unit> = ...) // com.arkivanov.decompose.router.slot/activate|activate@com.arkivanov.decompose.router.slot.SlotNavigator<0:0>(0:0;kotlin.Function0<kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/bringToFront(#A, crossinline kotlin/Function0<kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/bringToFront|bringToFront@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(0:0;kotlin.Function0<kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/pop(crossinline kotlin/Function1<kotlin/Boolean, kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/pop|pop@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(kotlin.Function1<kotlin.Boolean,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/popTo(kotlin/Int, crossinline kotlin/Function1<kotlin/Boolean, kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/popTo|popTo@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(kotlin.Int;kotlin.Function1<kotlin.Boolean,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/popWhile(crossinline kotlin/Function1<#A, kotlin/Boolean>) // com.arkivanov.decompose.router.stack/popWhile|popWhile@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/popWhile(crossinline kotlin/Function1<#A, kotlin/Boolean>, crossinline kotlin/Function1<kotlin/Boolean, kotlin/Unit>) // com.arkivanov.decompose.router.stack/popWhile|popWhile@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(kotlin.Function1<0:0,kotlin.Boolean>;kotlin.Function1<kotlin.Boolean,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/push(#A, crossinline kotlin/Function0<kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/push|push@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(0:0;kotlin.Function0<kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/pushNew(#A, crossinline kotlin/Function1<kotlin/Boolean, kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/pushNew|pushNew@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(0:0;kotlin.Function1<kotlin.Boolean,kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/pushToFront(#A, crossinline kotlin/Function0<kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/pushToFront|pushToFront@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(0:0;kotlin.Function0<kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/replaceAll(kotlin/Array<out #A>..., crossinline kotlin/Function0<kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/replaceAll|replaceAll@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(kotlin.Array<out|0:0>...;kotlin.Function0<kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (com.arkivanov.decompose.router.stack/StackNavigator<#A>).com.arkivanov.decompose.router.stack/replaceCurrent(#A, crossinline kotlin/Function0<kotlin/Unit> = ...) // com.arkivanov.decompose.router.stack/replaceCurrent|replaceCurrent@com.arkivanov.decompose.router.stack.StackNavigator<0:0>(0:0;kotlin.Function0<kotlin.Unit>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> com.arkivanov.decompose.router.children/NavStateSaver(crossinline kotlin/Function1<#A, com.arkivanov.essenty.statekeeper/SerializableContainer?>, crossinline kotlin/Function1<com.arkivanov.essenty.statekeeper/SerializableContainer, #A?>): com.arkivanov.decompose.router.children/NavStateSaver<#A> // com.arkivanov.decompose.router.children/NavStateSaver|NavStateSaver(kotlin.Function1<0:0,com.arkivanov.essenty.statekeeper.SerializableContainer?>;kotlin.Function1<com.arkivanov.essenty.statekeeper.SerializableContainer,0:0?>){0§<kotlin.Any>}[0]

// Targets: [js, wasmJs]
final class com.arkivanov.decompose.router.stack.webhistory/DefaultWebHistoryController : com.arkivanov.decompose.router.stack.webhistory/WebHistoryController { // com.arkivanov.decompose.router.stack.webhistory/DefaultWebHistoryController|null[0]
    constructor <init>() // com.arkivanov.decompose.router.stack.webhistory/DefaultWebHistoryController.<init>|<init>(){}[0]

    final val historyPaths // com.arkivanov.decompose.router.stack.webhistory/DefaultWebHistoryController.historyPaths|{}historyPaths[0]
        final fun <get-historyPaths>(): kotlin.collections/List<kotlin/String> // com.arkivanov.decompose.router.stack.webhistory/DefaultWebHistoryController.historyPaths.<get-historyPaths>|<get-historyPaths>(){}[0]

    final fun <#A1: kotlin/Any> attach(com.arkivanov.decompose.router.stack/StackNavigator<#A1>, com.arkivanov.decompose.value/Value<com.arkivanov.decompose.router.stack/ChildStack<#A1, *>>, kotlinx.serialization/KSerializer<#A1>, kotlin/Function1<#A1, kotlin/String>, kotlin/Function1<kotlin/String, #A1>, kotlin/Function2<kotlin.collections/List<#A1>, kotlin.collections/List<#A1>, kotlin/Boolean>) // com.arkivanov.decompose.router.stack.webhistory/DefaultWebHistoryController.attach|attach(com.arkivanov.decompose.router.stack.StackNavigator<0:0>;com.arkivanov.decompose.value.Value<com.arkivanov.decompose.router.stack.ChildStack<0:0,*>>;kotlinx.serialization.KSerializer<0:0>;kotlin.Function1<0:0,kotlin.String>;kotlin.Function1<kotlin.String,0:0>;kotlin.Function2<kotlin.collections.List<0:0>,kotlin.collections.List<0:0>,kotlin.Boolean>){0§<kotlin.Any>}[0]
}

// Targets: [js, wasmJs]
final fun <#A: com.arkivanov.decompose.router.webhistory/WebNavigationOwner> com.arkivanov.decompose.router.webhistory/withWebHistory(kotlin/Function2<com.arkivanov.essenty.statekeeper/StateKeeper, kotlin/String?, #A>): #A // com.arkivanov.decompose.router.webhistory/withWebHistory|withWebHistory(kotlin.Function2<com.arkivanov.essenty.statekeeper.StateKeeper,kotlin.String?,0:0>){0§<com.arkivanov.decompose.router.webhistory.WebNavigationOwner>}[0]
